# Lecture 3

## Exercise: Map data to visual properties

-   Unemployment as a percentage: you can visually compare even with differing employment numbers
-   Pie chart: since there are only 5 countries, you can visually see
-   Gradients/Scale/shade: darker hues are higher unemploymnet \# versus lower hues are lower unemployment \#
-   circle within a circle
-   length or height

## Best data Viz Practices

-   interactivity using the `network D3` package

## Tipes for choosing the right graphic form

1.  messages you want to convey
2.  Consider th enumber of variables and the number of data points
3.  Try different graphic forms
4.  supplementary data visualization
5.  Arrange the components of the graphic
6.  Secretly usefule to understand trends
7.  Test the outcomes of your graphic on others
8.  Make sure the audience is getting the correct message and information

```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.........................load libraries.........................
library(tidyverse)
library(janitor)
library(gghighlight)
library(tidycensus)

#.........................source API key.........................
source("~/Documents/MEDSWINTER2024/EDS240/eds240_git/EDS-240-class-examples/week3/KEYS.R")
census_api_key(censusKEY)

#..........................import data...........................
lyme <- read_csv(here::here("week3", "data", "LD-Case-Counts-by-County-01-20.csv"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          wrangle lyme disease data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#............wide to long (plus some other wrangling)............
lyme_clean <- lyme |> 
  
  # make col names snake_case ----
  janitor::clean_names() |> 
  
  # rename columns ----
  rename(city = ctyname, state = stname, status = ststatus) |> 
  
  # wide to long (tidy) years
  pivot_longer(cols = 6:25, names_to = "city_year", values_to = "reported_cases") |> 
  
  # remove "cases" from the year & coerce year from chr to factor ----
  mutate(year = str_remove(city_year, pattern = "cases"),
         year = as.factor(year)) |> 
  
  # select necessary cols ----
  select(year, city, state, status, reported_cases)

#................calculate total cases per state.................
lyme_by_state <- lyme_clean |> 
  group_by(year, state) |> 
  summarize(total_cases = sum(reported_cases)) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                      request / wrangle population data                   ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...................get pop estimates by state...................
us_state_pop <- get_estimates(geography = "state", 
                              product = "population",
                              state = NULL, 
                              year = 2019) |> 
  filter(variable == "POP") |> 
  select(state = NAME, population = value) 

#........................write data to csv.......................
# optional, but recommended in case you want to work offline, the API is down, etc. (you can then read in your saved data file rather than run the above code)
# write_csv(us_state_pop, file = here::here("week3", "data", "us_state_pop.csv"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            join lyme & pop dfs                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

lyme_pop <- left_join(lyme_by_state, us_state_pop) |> 
  
  # add col with num of 100k people per state ----
  mutate(pop100k = population/100000) |> 
  
  # calculate num cases per 100k people (common way of reporting disease incidence) ----
  mutate(cases_per100k = total_cases/pop100k) 

```

```{r}
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) + 
  geom_line() + 
  #geom_point() +
  # only want to bold certian lines 
  #gghighlight::gghighlight(state == 'New Jersey')
  #gghighlight with conditionals
  gghighlight::gghighlight(max(cases_per100k)> 100)
```

### Do we need to cut the y-axis??

-   only need to include 0 axis if it makes sense
-   understand the change in your data

### Asepect Ratio

```{r}
lyme_pop %>% 
  filter(year%in% c(2010:2020)) %>% 
  filter(state == "Vermont" ) %>% 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  #scale_y_continuous(breaks = seq(0,190, by = 1)) +
  # adjust x axis so that it also in increments of one
  coord_fixed(ratio = 1/50) 
  # stretch out wider by changing the ratio 
  
  
```

## Area Plots

-   usually not for specific values but more for proportionality
-   no spagettis, give me groups of interest
-   good for showing proportionality as a whole

```{r}
# area chart one group ------

# data ink ratio: minimize the ink that you use in data viz
lyme_pop %>% 
  filter(year %in% c(2010:2020)) %>% 
  filter(state == "Illinois") %>% 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area() +
  # gets rid of legend 
  theme(legend.position = "none") +
  # setting the color 
  scale_fill_manual(values = c("#738678")) +
  # how to get rid of buffer space
  scale_x_discrete(expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0))

# stacked area chart ---
# the top line is the sum of all the lyme disease for all states
# in order to get the absolute value you would need to subtract n - (n-1)
lyme_pop %>% 
  filter(year %in% c(2010:2020)) %>% 
  filter(state %in% c("Maine", 'Rhode Island', "New Hampshire", "Vermont")) %>%
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area(position = "fill") +
  # manually fill bars with a specified color(s)
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A", "red"))+
  # scale package to change scale of the axis as percentage
  scale_y_continuous(labels = scales::label_percent(scale = 100))
```

## 
```{r}

```
